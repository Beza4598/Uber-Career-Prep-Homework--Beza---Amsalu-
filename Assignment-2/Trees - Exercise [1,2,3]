import java.util.LinkedList;
import java.util.Queue;

public class Tree {
    public TreeNode root;

    public Tree(TreeNode root) {
        this.root = root;
    }

    public static class TreeNode {
        public int data;
        public TreeNode left;
        public TreeNode right;

        public TreeNode(int data, TreeNode left, TreeNode right) {
            this.data = data;
            this.left = left;
            this.right = right;
        }
    }

    //Ex. 1
    public void print(){
        print(root);
    }

    private void print(TreeNode root){
        if(root != null){
            print(root.left);
            System.out.println(root.data);
            print(root.right);
        }
    }


    //Ex. 2
    public void printLevelByLevel(){
        Queue<TreeNode> queue = new LinkedList<>();

        queue.add(root);

        while(!queue.isEmpty()){
            TreeNode current = queue.remove();
            System.out.println(current.data);

            if(current.left != null)
                queue.add(current.left);
            if(current.right != null)
                queue.add(current.right);
        }
    }

    //Ex. 3
    public int printNumLevels(){
        Queue<TreeNode> queue = new LinkedList<>();

        queue.add(root);
        int lvlCount = 0;

        while(!queue.isEmpty()){
            TreeNode current = queue.remove();

            if(current.left != null)
                queue.add(current.left);
            if(current.right != null)
                queue.add(current.right);

            lvlCount++;
        }

        return lvlCount;
    }


    public static void main(String[] args) {
        TreeNode leftChild = new TreeNode(6, null, null);
        TreeNode rightChild = new TreeNode(3, null, null);
        TreeNode left = new TreeNode(7, null, null);
        TreeNode right = new TreeNode(17, leftChild, rightChild);
        TreeNode root = new TreeNode(1, left, right);
        Tree tree = new Tree(root);
    }

}
